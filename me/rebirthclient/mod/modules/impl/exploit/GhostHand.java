//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import net.minecraft.block.state.*;
import net.minecraft.init.*;
import net.minecraft.block.*;
import org.spongepowered.asm.mixin.injection.callback.*;
import org.lwjgl.input.*;
import me.rebirthclient.api.util.*;
import net.minecraft.entity.*;
import me.rebirthclient.api.util.troll.*;
import net.minecraft.util.*;
import net.minecraft.client.entity.*;
import net.minecraft.util.math.*;
import me.rebirthclient.mod.modules.*;
import java.util.*;

public class GhostHand extends Module
{
    private static final List blockList;
    private static final Function2 function;
    public static GhostHand INSTANCE;
    
    private static RayTraceAction function$lambda(final BlockPos blockPos, final IBlockState blockState) {
        final Block getBlock = blockState.getBlock();
        if (getBlock != Blocks.AIR && getBlock.canCollideCheck(blockState, false) && !GhostHand.blockList.contains(String.valueOf(getBlock.getRegistryName()))) {
            return (RayTraceAction)RayTraceAction.Calc.INSTANCE;
        }
        return (RayTraceAction)RayTraceAction.Skip.INSTANCE;
    }
    
    public static void handleRayTrace(final double n, final float n2, final CallbackInfoReturnable callbackInfoReturnable) {
        if (GhostHand.INSTANCE.isOff()) {
            return;
        }
        if (GhostHand.mc.currentScreen == null) {
            if (Keyboard.isKeyDown(56) || Keyboard.isKeyDown(184)) {
                return;
            }
            if (Keyboard.isKeyDown(29) || Keyboard.isKeyDown(157)) {
                return;
            }
            if (Mouse.isButtonDown(1)) {
                return;
            }
        }
        final EntityPlayerSP player = GhostHand.mc.player;
        if (player != null) {
            final Vec3d eyePosition = EntityUtil.getEyePosition((Entity)player);
            final Vec3d getLook = player.getLook(n2);
            final Vec3d add = eyePosition.add(getLook.x * n, getLook.y * n, getLook.z * n);
            RayTraceResult rayTrace;
            if ((rayTrace = RaytraceKt.rayTrace(player.world, eyePosition, add, 50, GhostHand.function)) == null) {
                rayTrace = new RayTraceResult(RayTraceResult.Type.MISS, add, EnumFacing.UP, new BlockPos((int)(add.x + 1.073741824E9) - 1073741824, (int)(add.y + 1.073741824E9) - 1073741824, (int)(add.z + 1.073741824E9) - 1073741824));
            }
            callbackInfoReturnable.setReturnValue((Object)rayTrace);
        }
    }
    
    public GhostHand() {
        super("GhostHand", "", Category.EXPLOIT);
        GhostHand.INSTANCE = this;
    }
    
    static {
        blockList = Arrays.asList("minecraft:bedrock", "minecraft:portal_frame", "minecraft:portal");
        function = GhostHand::function$lambda;
    }
}
