//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.mod.modules.settings.*;
import net.minecraft.entity.*;
import me.rebirthclient.mod.modules.*;
import net.minecraft.network.*;
import net.minecraftforge.fml.common.eventhandler.*;
import me.rebirthclient.api.events.impl.*;
import net.minecraft.network.play.client.*;

public class GodMode extends Module
{
    private final Setting remount;
    private Entity entity;
    
    public GodMode() {
        super("GodMode", "test", Category.EXPLOIT);
        this.remount = this.add(new Setting("Remount", false));
    }
    
    private void hideEntity() {
        if (GodMode.mc.player.getRidingEntity() != null) {
            GodMode.mc.player.dismountRidingEntity();
            GodMode.mc.world.removeEntity(this.entity);
        }
    }
    
    @SubscribeEvent
    public void onPlayerWalkingUpdate(final UpdateWalkingPlayerEvent updateWalkingPlayerEvent) {
        if (fullNullCheck()) {
            return;
        }
        if (this.entity == null) {
            return;
        }
        if (updateWalkingPlayerEvent.getStage() == 0) {
            if (this.remount.getValue()) {
                this.showEntity(this.entity);
            }
            this.entity.setPositionAndRotation(GodMode.mc.player.posX, GodMode.mc.player.posY, GodMode.mc.player.posZ, GodMode.mc.player.rotationYaw, GodMode.mc.player.rotationPitch);
            GodMode.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Rotation(GodMode.mc.player.rotationYaw, GodMode.mc.player.rotationPitch, true));
            GodMode.mc.player.connection.sendPacket((Packet)new CPacketInput(GodMode.mc.player.movementInput.moveForward, GodMode.mc.player.movementInput.moveStrafe, false, false));
            GodMode.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.entity));
        }
    }
    
    private void showEntity(final Entity entity) {
        entity.isDead = false;
        GodMode.mc.world.loadedEntityList.add(entity);
        GodMode.mc.player.startRiding(entity, true);
    }
    
    @Override
    public void onEnable() {
        if (GodMode.mc.world != null && GodMode.mc.player.getRidingEntity() != null) {
            this.entity = GodMode.mc.player.getRidingEntity();
            GodMode.mc.renderGlobal.loadRenderers();
            this.hideEntity();
            GodMode.mc.player.setPosition((double)GodMode.mc.player.getPosition().getX(), (double)(GodMode.mc.player.getPosition().getY() - 1), (double)GodMode.mc.player.getPosition().getZ());
        }
        if (GodMode.mc.world != null && (boolean)this.remount.getValue()) {
            this.remount.setValue(false);
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send send) {
        if (fullNullCheck()) {
            return;
        }
        if (send.getPacket() instanceof CPacketPlayer.Position || send.getPacket() instanceof CPacketPlayer.PositionRotation) {
            send.setCanceled(true);
        }
    }
    
    @Override
    public void onDisable() {
        if (this.remount.getValue()) {
            this.remount.setValue(false);
        }
        GodMode.mc.player.dismountRidingEntity();
        GodMode.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)GodMode.mc.player, CPacketEntityAction.Action.START_SNEAKING));
        GodMode.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)GodMode.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
    }
}
