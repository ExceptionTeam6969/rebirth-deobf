//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.mod.modules.settings.*;
import me.rebirthclient.mod.modules.*;
import java.io.*;
import net.minecraft.entity.*;
import net.minecraft.entity.player.*;
import net.minecraft.util.math.*;
import com.mojang.realmsclient.gui.*;
import java.util.*;

public class TPCoordLog extends Module
{
    private final Setting saveCoords;
    private final HashMap tpdPlayers;
    private final HashMap knownPlayers;
    private int numForgetTicks;
    private int numTicks;
    
    public TPCoordLog() {
        super("TPCoordLog", "New exploit", Category.EXPLOIT);
        this.saveCoords = this.add(new Setting("SaveToFile", true));
        this.knownPlayers = new HashMap();
        this.tpdPlayers = new HashMap();
    }
    
    private void saveFile(final String s, final String s2) {
        if (this.saveCoords.getValue()) {
            try {
                final File file = new File("./Rebirth/loggedCoords.txt");
                file.getParentFile().mkdirs();
                final PrintWriter printWriter = new PrintWriter(new FileWriter(file, true));
                printWriter.println("(Teleport) IGN: " + s2 + " Pos: " + s + "Server: " + (TPCoordLog.mc.isSingleplayer() ? "singleplayer" : TPCoordLog.mc.getCurrentServerData().serverIP));
                printWriter.close();
            }
            catch (Exception ex) {}
        }
    }
    
    @Override
    public void onUpdate() {
        if (this.numTicks >= 50) {
            this.numTicks = 0;
            final Iterator<Entity> iterator = TPCoordLog.mc.world.loadedEntityList.iterator();
            if (iterator.hasNext()) {
                final Entity entity = iterator.next();
                if (entity instanceof EntityPlayer && !Integer.valueOf(TPCoordLog.mc.player.getName().hashCode()).equals(entity.getName().hashCode())) {
                    final Vec3d vec3d = new Vec3d(entity.posX, entity.posY, entity.posZ);
                    if (this.knownPlayers.containsKey(entity) && Math.abs(this.knownPlayers.get(entity).distanceTo(vec3d)) > 50.0 && Math.abs(TPCoordLog.mc.player.getPositionVector().distanceTo(vec3d)) > 100.0 && (!this.tpdPlayers.containsKey(entity.getName()) || this.tpdPlayers.get(entity.getName()) != vec3d)) {
                        this.sendMessage(ChatFormatting.WHITE + entity.getName() + ChatFormatting.GRAY + " has TP'd to " + ChatFormatting.WHITE + this.vectorToString(vec3d));
                        this.saveFile(this.vectorToString(vec3d), entity.getName());
                        this.knownPlayers.remove(entity);
                        this.tpdPlayers.put(entity.getName(), vec3d);
                    }
                    this.knownPlayers.put(entity, vec3d);
                }
                return;
            }
        }
        if (this.numForgetTicks >= 9000000) {
            this.tpdPlayers.clear();
        }
        ++this.numTicks;
        ++this.numForgetTicks;
    }
    
    private String vectorToString(final Vec3d vec3d) {
        return "(" + (int)Math.floor(vec3d.x) + ", " + (int)Math.floor(vec3d.z) + ")";
    }
}
