//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.mod.modules.settings.*;
import me.rebirthclient.mod.modules.*;
import me.rebirthclient.mod.modules.impl.movement.*;
import net.minecraft.entity.*;
import net.minecraft.util.math.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;

public class Clip extends Module
{
    private final Setting timeout;
    private final Setting delay;
    public static Clip INSTANCE;
    private int packets;
    int ticks;
    
    @Override
    public String getInfo() {
        return String.valueOf(this.packets);
    }
    
    @Override
    public void onDisable() {
        this.packets = 0;
        this.ticks = 0;
    }
    
    public Clip() {
        super("Clip", "Clips into blocks nearby to prevent crystal damage", Category.EXPLOIT);
        this.delay = this.add(new Setting("delay", 5, 1, 10));
        this.timeout = this.add(new Setting("Timeout", 5, 1, 20));
        this.ticks = 0;
        Clip.INSTANCE = this;
    }
    
    @Override
    public void onUpdate() {
        if (Sprint.isMoving()) {
            this.ticks = 0;
            return;
        }
        ++this.ticks;
        if (this.ticks > (int)this.timeout.getValue()) {
            return;
        }
        if (Clip.mc.world.getCollisionBoxes((Entity)Clip.mc.player, Clip.mc.player.getEntityBoundingBox().grow(0.01, 0.0, 0.01)).size() < 2) {
            Clip.mc.player.setPosition(this.roundToClosest(Clip.mc.player.posX, Math.floor(Clip.mc.player.posX) + 0.301, Math.floor(Clip.mc.player.posX) + 0.699), Clip.mc.player.posY, this.roundToClosest(Clip.mc.player.posZ, Math.floor(Clip.mc.player.posZ) + 0.301, Math.floor(Clip.mc.player.posZ) + 0.699));
            this.packets = 0;
        }
        else if (Clip.mc.player.ticksExisted % (int)this.delay.getValue() == 0) {
            Clip.mc.player.setPosition(Clip.mc.player.posX + MathHelper.clamp(this.roundToClosest(Clip.mc.player.posX, Math.floor(Clip.mc.player.posX) + 0.241, Math.floor(Clip.mc.player.posX) + 0.759) - Clip.mc.player.posX, -0.03, 0.03), Clip.mc.player.posY, Clip.mc.player.posZ + MathHelper.clamp(this.roundToClosest(Clip.mc.player.posZ, Math.floor(Clip.mc.player.posZ) + 0.241, Math.floor(Clip.mc.player.posZ) + 0.759) - Clip.mc.player.posZ, -0.03, 0.03));
            Clip.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Clip.mc.player.posX, Clip.mc.player.posY, Clip.mc.player.posZ, true));
            Clip.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(this.roundToClosest(Clip.mc.player.posX, Math.floor(Clip.mc.player.posX) + 0.23, Math.floor(Clip.mc.player.posX) + 0.77), Clip.mc.player.posY, this.roundToClosest(Clip.mc.player.posZ, Math.floor(Clip.mc.player.posZ) + 0.23, Math.floor(Clip.mc.player.posZ) + 0.77), true));
            ++this.packets;
        }
    }
    
    private double roundToClosest(final double n, final double n2, final double n3) {
        if (n3 - n > n - n2) {
            return n2;
        }
        return n3;
    }
}
