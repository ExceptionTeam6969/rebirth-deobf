//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.api.util.*;
import me.rebirthclient.mod.modules.settings.*;
import java.util.*;
import net.minecraft.network.*;
import me.rebirthclient.api.events.impl.*;
import net.minecraft.init.*;
import net.minecraft.network.play.client.*;
import net.minecraft.entity.*;
import net.minecraftforge.fml.common.eventhandler.*;
import me.rebirthclient.mod.modules.*;

public class SuperBow extends Module
{
    private final Timer activeTimer;
    private final Setting minimize;
    private final Setting activeTime;
    private final Timer delayTimer;
    private final Setting exploit;
    private final Random random;
    private final Setting delay;
    private final Setting Mode;
    private final Setting factor;
    private final Setting rotation;
    
    private void spoof(final double n, final double n2, final double n3, final boolean b) {
        if (this.rotation.getValue()) {
            SuperBow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(n, n2, n3, SuperBow.mc.player.rotationYaw, SuperBow.mc.player.rotationPitch, b));
        }
        else {
            SuperBow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(n, n2, n3, b));
        }
    }
    
    @SubscribeEvent
    protected void onPacketSend(final PacketEvent.Send send) {
        if (fullNullCheck() || !this.delayTimer.passedMs((long)((float)this.delay.getValue() * 1000.0f)) || !this.activeTimer.passedMs((long)((float)this.activeTime.getValue() * 1000.0f))) {
            return;
        }
        if (send.getPacket() instanceof CPacketPlayerDigging && ((CPacketPlayerDigging)send.getPacket()).getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM && SuperBow.mc.player.getActiveItemStack().getItem() == Items.BOW) {
            SuperBow.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)SuperBow.mc.player, CPacketEntityAction.Action.START_SPRINTING));
            final double[] array = { 100.0 * -Math.sin(Math.toRadians(SuperBow.mc.player.rotationYaw)), 100.0 * Math.cos(Math.toRadians(SuperBow.mc.player.rotationYaw)) };
            if (this.exploit.getValue() == exploitEn.Fast) {
                int n = 0;
                if (n < this.getRuns()) {
                    this.spoof(SuperBow.mc.player.posX, ((boolean)this.minimize.getValue()) ? SuperBow.mc.player.posY : (SuperBow.mc.player.posY - 1.0E-10), SuperBow.mc.player.posZ, true);
                    this.spoof(SuperBow.mc.player.posX, SuperBow.mc.player.posY + 1.0E-10, SuperBow.mc.player.posZ, false);
                    ++n;
                    return;
                }
            }
            if (this.exploit.getValue() == exploitEn.Strong) {
                int n2 = 0;
                if (n2 < this.getRuns()) {
                    this.spoof(SuperBow.mc.player.posX, SuperBow.mc.player.posY + 1.0E-10, SuperBow.mc.player.posZ, false);
                    this.spoof(SuperBow.mc.player.posX, ((boolean)this.minimize.getValue()) ? SuperBow.mc.player.posY : (SuperBow.mc.player.posY - 1.0E-10), SuperBow.mc.player.posZ, true);
                    ++n2;
                    return;
                }
            }
            if (this.exploit.getValue() == exploitEn.Phobos) {
                int n3 = 0;
                if (n3 < this.getRuns()) {
                    this.spoof(SuperBow.mc.player.posX, SuperBow.mc.player.posY + 1.3E-13, SuperBow.mc.player.posZ, true);
                    this.spoof(SuperBow.mc.player.posX, SuperBow.mc.player.posY + 2.7E-13, SuperBow.mc.player.posZ, false);
                    ++n3;
                    return;
                }
            }
            if (this.exploit.getValue() == exploitEn.Strict) {
                int n4 = 0;
                if (n4 < this.getRuns()) {
                    if (this.random.nextBoolean()) {
                        this.spoof(SuperBow.mc.player.posX - array[0], SuperBow.mc.player.posY, SuperBow.mc.player.posZ - array[1], false);
                    }
                    else {
                        this.spoof(SuperBow.mc.player.posX + array[0], SuperBow.mc.player.posY, SuperBow.mc.player.posZ + array[1], true);
                    }
                    ++n4;
                    return;
                }
            }
            this.delayTimer.reset();
        }
    }
    
    private int getRuns() {
        if (this.Mode.getValue() == ModeEn.Factorised) {
            return 10 + (int)((float)this.factor.getValue() - 1.0f);
        }
        if (this.Mode.getValue() == ModeEn.Normal) {
            return (int)Math.floor((float)this.factor.getValue());
        }
        if (this.Mode.getValue() == ModeEn.Maximum) {
            return (int)(30.0f * (float)this.factor.getValue());
        }
        return 1;
    }
    
    @Override
    public void onTick() {
        if (!SuperBow.mc.player.isHandActive() || SuperBow.mc.player.getActiveItemStack().getItem() != Items.BOW) {
            this.activeTimer.reset();
        }
    }
    
    public SuperBow() {
        super("SuperBow", "exploit", Category.EXPLOIT);
        this.delayTimer = new Timer();
        this.rotation = this.add(new Setting("Rotation", false));
        this.Mode = this.add(new Setting("Mode", ModeEn.Maximum));
        this.factor = this.add(new Setting("Factor", 1.0f, 1.0f, 20.0f));
        this.exploit = this.add(new Setting("Exploit", exploitEn.Strong));
        this.minimize = this.add(new Setting("Minimize", false));
        this.delay = this.add(new Setting("Delay", 5.0f, 0.0f, 10.0f));
        this.activeTime = this.add(new Setting("ActiveTime", 0.4f, 0.0f, 3.0f));
        this.random = new Random();
        this.activeTimer = new Timer();
    }
    
    private enum ModeEn
    {
        Normal("Normal", 0), 
        Factorised("Factorised", 2), 
        Maximum("Maximum", 1);
        
        private static final ModeEn[] $VALUES;
        
        private ModeEn(final String s, final int n) {
        }
        
        static {
            $VALUES = new ModeEn[] { ModeEn.Normal, ModeEn.Maximum, ModeEn.Factorised };
        }
    }
    
    private enum exploitEn
    {
        Strong("Strong", 0);
        
        private static final exploitEn[] $VALUES;
        
        Fast("Fast", 1), 
        Strict("Strict", 2), 
        Phobos("Phobos", 3);
        
        private exploitEn(final String s, final int n) {
        }
        
        static {
            $VALUES = new exploitEn[] { exploitEn.Strong, exploitEn.Fast, exploitEn.Strict, exploitEn.Phobos };
        }
    }
}
