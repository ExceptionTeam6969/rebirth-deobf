//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\23204\Desktop\cn×îÇ¿·´±àÒëÆ÷\1.12 stable mappings"!

//Decompiled by Procyon!

package me.rebirthclient.mod.modules.impl.exploit;

import me.rebirthclient.mod.modules.settings.*;
import com.mojang.authlib.*;
import net.minecraft.client.entity.*;
import net.minecraft.entity.*;
import net.minecraft.world.*;
import me.rebirthclient.api.events.impl.*;
import net.minecraft.network.play.client.*;
import net.minecraftforge.fml.common.eventhandler.*;
import me.rebirthclient.mod.modules.*;
import net.minecraft.network.*;
import java.util.*;

public class Blink extends Module
{
    private final Setting anyPacket;
    public static Blink INSTANCE;
    private final ArrayList packetsList;
    
    @Override
    public void onEnable() {
        if (fullNullCheck()) {
            return;
        }
        this.packetsList.clear();
        final EntityOtherPlayerMP entityOtherPlayerMP = new EntityOtherPlayerMP((World)Blink.mc.world, new GameProfile(UUID.fromString("0f75a81d-70e5-43c5-b892-f33c524284f3"), "¡ìaYou"));
        entityOtherPlayerMP.copyLocationAndAnglesFrom((Entity)Blink.mc.player);
        entityOtherPlayerMP.rotationYawHead = Blink.mc.player.rotationYawHead;
        entityOtherPlayerMP.rotationYaw = Blink.mc.player.rotationYaw;
        entityOtherPlayerMP.rotationPitch = Blink.mc.player.rotationPitch;
        entityOtherPlayerMP.setGameType(GameType.SURVIVAL);
        entityOtherPlayerMP.inventory.copyInventory(Blink.mc.player.inventory);
        entityOtherPlayerMP.setHealth(20.0f);
        Blink.mc.world.addEntityToWorld(-123456, (Entity)entityOtherPlayerMP);
        entityOtherPlayerMP.onLivingUpdate();
    }
    
    @SubscribeEvent
    public void onSendPacket(final PacketEvent.Send send) {
        if (fullNullCheck()) {
            return;
        }
        if (send.getPacket() instanceof CPacketPlayer || (boolean)this.anyPacket.getValue()) {
            this.packetsList.add(send.getPacket());
            send.setCanceled(true);
        }
    }
    
    @Override
    public void onTick() {
        if (Blink.mc.player.isDead) {
            this.disable();
        }
    }
    
    static {
        Blink.INSTANCE = new Blink();
    }
    
    @Override
    public void onLogin() {
        if (this.isOn()) {
            this.disable();
        }
    }
    
    @Override
    public void onLogout() {
        if (this.isOn()) {
            this.disable();
        }
    }
    
    public Blink() {
        super("Blink", "Fake lag", Category.EXPLOIT);
        this.packetsList = new ArrayList();
        this.anyPacket = this.add(new Setting("AnyPacket", false));
        Blink.INSTANCE = this;
    }
    
    @Override
    public void onDisable() {
        if (fullNullCheck()) {
            return;
        }
        Blink.mc.world.removeEntityFromWorld(-123456);
        final Iterator<Packet> iterator = this.packetsList.iterator();
        if (iterator.hasNext()) {
            Blink.mc.player.connection.sendPacket((Packet)iterator.next());
        }
    }
    
    @Override
    public String getInfo() {
        return String.valueOf(this.packetsList.size());
    }
}
